{"acadYear": "2020/2021", "description": "The performance gap between optimised and unoptimised code continues to widen as modern processors evolve. Notably, the emerging explicitly parallel instruction computing (EPIC) processors are significantly dependent on a range of aggressive program optimisations to yield performance. This module provides an in-depth study of code optimisation techniques used in compilers for state-of-the-art processors.  Topics covered include structure of an optimising compiler, the program dependence graph, front end optimisations, instruction scheduling, register allocation, compiling for EPIC processors including predicated execution and software pipelining with hardware support, loop optimisations, dataflow analysis and optimisation, optimisations for the memory hierarchy, and automatic parallelisation.", "title": "Design of Optimising Compilers", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3212 or CS4212", "moduleCredit": "4", "moduleCode": "CS5214", "attributes": {"lab": true}, "semesterData": [], "prereqTree": {"or": ["CS3212", "CS4212"]}}